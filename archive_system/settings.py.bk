import os
from pathlib import Path

# BASE_DIRを設定
BASE_DIR = Path(__file__).resolve().parent.parent

# 環境変数から設定ファイルを決定
ENVIRONMENT = os.getenv('DJANGO_ENVIRONMENT', 'development')

if ENVIRONMENT == 'docker':
    from .settings_docker import *
else:
    # デフォルトの開発用設定
    from .settings_development import *
    
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-z1vek2q$d0ia4jplh0mmu#k5e5xgv^k9h$et_dofot$3p7)r8v"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

# ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    # 'grappelli',
    # 'filebrowser',
    "django.contrib.admin", # Django管理サイト
    "django.contrib.auth", # 認証システム
    "django.contrib.contenttypes", # コンテンツタイプフレームワーク
    "django.contrib.sessions", # セッションフレームワーク
    "django.contrib.messages", # メッセージフレームワーク
    "django.contrib.staticfiles", # 静的ファイルの管理
    "django.contrib.sites", # サイトフレームワーク
    "allauth", # 認証フレームワーク
    "allauth.account", # 認証フレームワーク
    # "allauth.socialaccount", # 認証フレームワーク
    'ckeditor', # テキストエディタ
    'ckeditor_uploader', # テキストエディタ
    "accounts", # アプリケーション
    "ArchiveViewer", # アプリケーション
    "manager", # アプリケーション
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware", # セキュリティ
    "django.contrib.sessions.middleware.SessionMiddleware", # セッション
    "django.middleware.common.CommonMiddleware", # 共通
    "django.middleware.csrf.CsrfViewMiddleware", # CSRF
    "django.contrib.auth.middleware.AuthenticationMiddleware", # 認証
    "django.contrib.messages.middleware.MessageMiddleware", # メッセージ
    "django.middleware.clickjacking.XFrameOptionsMiddleware", # クリックジャッキング
    "allauth.account.middleware.AccountMiddleware" # 認証フレームワーク
]

ROOT_URLCONF = "archive_system.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  #プロジェクト直下のtemplatesディレクトリを指定
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "archive_system.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "archive_system",
        "USER": "archive_system",
        "PASSWORD": "archive_system",
        "HOST": "localhost",
        "PORT": "3306",
    }
}
# DATABASE_ROUTERSの設定
DATABASE_ROUTERS = ['archive_system.dbrouter.ArchiveSystemRouter']


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ja-jp"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_TZ = True

# APPEND_SLASH = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# 下記からallauth
# ユーザーモデルをカスタムしたので設定
SITE_ID = 1
AUTH_USER_MODEL = 'accounts.User'
AUTHENTICATION_BACKENDS = [ 
#   'django.contrib.auth.backends.ModelBackend',     
  'allauth.account.auth_backends.AuthenticationBackend',
] 

#ユーザーネームは使わない
ACCOUNT_EMAIL_VERIFICATION = False 
ACCOUNT_USER_MODEL_USERNAME_FIELD = None

#認証にはメールアドレスを使用する
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_MAX_EMAIL_ADDRESSES = 1
#ログインURLの指定
LOGIN_URL = "/accounts/login"

#ログイン後のリダイレクト先を指定
LOGIN_REDIRECT_URL = "/"
# ユーザー名の必須設定
ACCOUNT_USERNAME_REQUIRED = False
#ログアウト後のリダイレクト先を指定
ACCOUNT_LOGOUT_REDIRECT_URL = "/"

#メールアドレスが確認済でないとログインできない
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# ユーザーが持つことができる最大のメールアドレス数は1
ACCOUNT_CHANGE_EMAIL = False
#即ログアウトとする
ACCOUNT_LOGOUT_ON_GET = True

# Email 本番用
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'localhost'
# EMAIL_PORT = 25
# EMAIL_HOST_USER = 'apptest'
# EMAIL_HOST_PASSWORD = 'xxxxxxxx'
# EMAIL_USE_TLS = False
# メール送信時の送信元
EMAIL_HOST_USER = 'apptest@localhost.com'
# メール送信のバックエンドを指定 ターミナル使用　デバッグ用
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"





# パスワードの制限設定
# デバッグ時はパスワードの制限を無効にする
if DEBUG:
    AUTH_PASSWORD_VALIDATORS = []
else:
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            'OPTIONS': {
                'min_length': 8,
            }
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]